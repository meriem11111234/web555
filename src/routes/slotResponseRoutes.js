const express = require("express");
const router = express.Router();
const pool = require("../config/db");

router.post("/", async (req, res) => {
  try {
    console.log("‚û°Ô∏è Requ√™te re√ßue :", req.body);

    const { meeting_id, accepted_slot_id, email, responseType } = req.body;

    if (!meeting_id || (!accepted_slot_id && responseType !== "refuse")) {
      console.log("‚ùå Donn√©es manquantes !");
      return res.status(400).json({ message: "Donn√©es manquantes" });
    }

    let userId;

    // üîí Si utilisateur connect√©
    if (req.session.user) {
      userId = req.session.user.id;
      console.log("üîê Utilisateur connect√©, ID :", userId);
    } else {
      if (!email) return res.status(400).json({ message: "Email requis" });
      console.log("üîé V√©rification de l'utilisateur invit√© par email :", email);

      const userResult = await pool.query("SELECT id FROM users WHERE email = $1", [email]);
      if (userResult.rows.length > 0) {
        userId = userResult.rows[0].id;
        console.log("üë§ Utilisateur existant trouv√©, ID :", userId);
      } else {
        const newUser = await pool.query(
          "INSERT INTO users (email, first_name, last_name, password, role) VALUES ($1, '', '', '', 'invit√©') RETURNING id",
          [email]
        );
        userId = newUser.rows[0].id;
        console.log("‚ûï Nouvel utilisateur invit√© cr√©√©, ID :", userId);
      }
    }

    // üë• V√©rifier s'il est d√©j√† participant
    const existingParticipant = await pool.query(
      "SELECT * FROM meeting_participants WHERE meeting_id = $1 AND user_id = $2",
      [meeting_id, userId]
    );
    if (existingParticipant.rows.length === 0) {
      await pool.query(
        "INSERT INTO meeting_participants (meeting_id, user_id, response) VALUES ($1, $2, 'invit√©')",
        [meeting_id, userId]
      );
      console.log("üë• Participant ajout√© √† la r√©union.");
    }

    // üßπ Supprimer les anciennes r√©ponses
    await pool.query(
      "DELETE FROM slot_responses WHERE user_id = $1 AND slot_id IN (SELECT id FROM meeting_slots WHERE meeting_id = $2)",
      [userId, meeting_id]
    );
    console.log("üßπ Anciennes r√©ponses supprim√©es pour cet utilisateur.");

    // ‚ùå Si refuse, on s'arr√™te ici
    if (responseType === "refuse") {
      console.log("üö´ Invitation refusee.");
      return res.status(200).json({ message: "Invitation refusee." });
    }

    const codeResult = await pool.query("SELECT code FROM meetings WHERE id = $1", [meeting_id]);
const code = codeResult.rows[0].code;


    // ‚úÖ Enregistrer la nouvelle r√©ponse
    await pool.query(
      "INSERT INTO slot_responses (slot_id, user_id, response) VALUES ($1, $2, 'accepte')",
      [accepted_slot_id, userId]
    );
    console.log("‚úÖ Cr√©neau accepte enregistr√© pour slot :", accepted_slot_id);

    return res.status(200).json({ message: "R√©ponse enregistr√©e !" });
  } catch (err) {
    console.error("‚ùå Erreur slot-response:", err);
    return res.status(500).json({ message: "Erreur serveur" });
  }
});

router.post("/reject", async (req, res) => {
  try {
    const { meeting_id, email } = req.body;

    console.log("üì© Requ√™te rejet re√ßue :", req.body);

    if (!meeting_id) {
      return res.status(400).json({ message: "meeting_id manquant" });
    }

    let userId = null;

    if (req.session.user) {
      userId = req.session.user.id;
    } else if (email) {
      // üîç V√©rifie si l'utilisateur existe
      const userResult = await pool.query("SELECT id FROM users WHERE email = $1", [email]);
      if (userResult.rows.length > 0) {
        userId = userResult.rows[0].id;
        console.log("üë§ Utilisateur invit√© trouv√© :", userId);
      } else {
        // ‚ûï Sinon, cr√©er un utilisateur invit√©
        const newUser = await pool.query(
          "INSERT INTO users (email, first_name, last_name, password, role) VALUES ($1, '', '', '', 'invit√©') RETURNING id",
          [email]
        );
        userId = newUser.rows[0].id;
        console.log("‚ûï Nouvel utilisateur invit√© cr√©√© :", userId);
      }
    }

    if (!userId) {
      return res.status(400).json({ message: "Utilisateur non trouv√©" });
    }

    const existing = await pool.query(
      "SELECT * FROM meeting_participants WHERE meeting_id = $1 AND user_id = $2",
      [meeting_id, userId]
    );
    
    if (existing.rows.length === 0) {
      await pool.query(
        "INSERT INTO meeting_participants (meeting_id, user_id, response) VALUES ($1, $2, 'refuse')",
        [meeting_id, userId]
      );
      console.log("‚ûï Participant ajout√© avec statut 'refuse'.");
    } else {
      await pool.query(`
        UPDATE meeting_participants
        SET response = 'refuse'
        WHERE meeting_id = $1 AND user_id = $2
      `, [meeting_id, userId]);
      console.log(`üõë Statut mis √† 'refuse' pour user_id = ${userId}`);
    }
        

    return res.status(200).json({ message: "Invitation refus√©e." });

  } catch (err) {
    console.error("‚ùå Erreur slot-response/reject:", err);
    return res.status(500).json({ message: "Erreur serveur" });
  }
});



module.exports = router;
